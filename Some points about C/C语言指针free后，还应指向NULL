一、为指针变量动态分配一个空间，释放后为什么还可以给指针所指向的空间的那个变量赋值？
  int * p = (int *)malloc(4);
  *p = 4;
  printf("*p = %d\n", *p);
  free(p);
  *p = 5;
  printf("*p = %d\n", *p);

  不是说释放后，*p应该没有权限读和写了吗，怎么还可以赋值成功，不赋值也可以读出一个垃圾值？

  答：动态指针是在堆上维护的，动态指针定义后，程序为指针分配了一块内存，而且保证这块内存不会被其他乱七八糟的东西修改。
     free或者delete的时候，是放弃了指针对这个内存的占用，放弃之后，内存的值会改写成随机值。但是！指针本身并没有被删除！指针仍然指向原来的那块内存！
      因此正确的做法应该是在delete或者free掉指针后，还要把指针指向null，即p = NULL。
 
 
 free(*T);                       //释放根节点
 *T = NULL;                      //空指针赋零  
      
      
      
