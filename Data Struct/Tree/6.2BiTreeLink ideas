一、利用给定字符串以构造二叉树
1.注意函数的输入参数为存储字符串的数组和字符串
2.判断如果字符串的长度比数组的最大长度大，打印提示
3.如果字符串符合要求，第一个元素存储字符串的长度，之后循环遍历进行赋值

二、定义二叉树的结点结构体
1.结构体中包含结点数据以及结点的左右孩子指针！
注意定义左右孩子指针实际上是在结构体中在定义一个相同类型的结构体

三、构造空二叉树T 
1.令结点的结构体为空

四、前序输入二叉树中结点的值（一个字符）
1.建立一个临时变量存储字符数组当前的字符，（字符数组之前已定义）
2.若当前字符为#，令当前的树为空树
  若不是：
  先给链表节点（树中的一个结点）申请空间，如果没有申请下来，程序终止；
  给链表结点的数据域赋值，
  递归(调用自己)，给结点左孩子子树赋值，注意此处对自己的引用实参；
  最后给结点的右子树赋值。
  
五、前序遍历二叉树
1.首先判断当前结点是否为空，若为空则直接返回；
2.先输出当前结点的值，而后遍历左孩子子树，再遍历右孩子子树

六、中序遍历

七、后序遍历

八、计算二叉树的深度---递归
1.核心思想是通过结点是否为空来递归，在递归的同时进行计数操作
2.如果该树为空，直接返回0；
 如果左孩子不空，计数变量i等于递归左孩子
 如果左孩子为空，计数变量=0；
继续判断右孩子，
如果右孩子不空，计数变量i等于递归右孩子
 如果右孩子为空，计数变量=0；
最后将ij中较大的数返回！

九、返回二叉树的根
1.判断T是否为空，空则返回0
2.不空则返回T对应的数据。

十、返回某个p结点所对应的值

十一、给p所指结点赋值为value 

十二、销毁二叉树T
1.注意销毁二叉树和创建二叉树有不同，创建二叉树可以三种循序遍历方式进行创建，
但是销毁二叉树只能用后续遍历的方式，因为如果先销毁掉根结点就找不到孩子结点了。
2.如果根节点非空，执行销毁程序
如果有左孩子，先对左孩子的子树进行销毁（通过递归实现）；
如果有右孩子，先对右孩子的子树进行销毁（通过递归实现）；
释放根结点，空指针赋零
















  
  
