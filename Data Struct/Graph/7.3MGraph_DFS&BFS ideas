一、建立一个邻接矩阵结构体
1.结构体包含一维数组--存储图中的顶点信息
2.包含一个二维数组（邻接矩阵/边表）--存储图中的边的信息
3.包含变量存储图中的顶点数和边数


/* 用到的队列结构与函数********************************** */
一、定义一个队列结构体--队列先进先出，头出尾进
1.包含一个数组用于存储数据，
2.包含两个指针(在数组中即为下标)，一个指向队列的头，一个指向队列的尾

二、初始化一个空队列（请空队列）
1.令队头和队尾都为零

三、判断队列是否为空
1.判断队列是否为空（头等于尾），空则返回1，否则为零；

四、若队列未满，则插入元素e为Q新的队尾元素
1.判断队列是否已满(依据公式：(尾+1)/队列长取余=头)，满了则提示
2.没满，则把数据给队尾处（队尾之前未存储数据）
3.队尾向后移动一位（继续指向一个空位），防止假溢出，除队列长取余。

五、若队列不空，则删除Q中队头元素，用e返回其值
1.判断队列是否为空（头等于尾），空则提示；
2.队列不空，打印头结点数据
3.头结点位置下移一个，防止假溢出，除队列长取余。

/**********************************************/

二、邻接矩阵的深度遍历
1.将所有顶点初始化为未访问状态；
2.循环遍历每个顶点，如果该顶点没有访问过，进入深度优先递归算法
3.深度优先递归算法
    1.传入的参数包括图和顶点
    2.将该顶点设置为已访问并打印该顶点
    3.循环遍历所有顶点，对于没有访问并且和i顶点有连接（G.arc[i][j] == 1）的顶点，进行递归调用。

三、邻接矩阵的广度遍历算法
1.广度遍历算法的核心是依次访问邻接点，利用队列的先进先出特性进行辅助实现
2.初始化：将所有顶点初始化为未访问状态，初始化队列。
3.对每一个顶点做循环，若是未访问过则进行处理：
    1.将顶点设置为已访问，并打印该顶点；
    2.将该顶点入队列；
    当队列不空时（while循环）：
       1.将队首顶点出队列并赋值给i；
       2.循环遍历每个顶点，其它顶点若与当前顶点存在边（邻接点）且未访问过：
             将该顶点设为已访问，打印该顶点的值并将该顶点入队。
!!此处所说的顶点入队出队指的应是顶点的下标而非顶点的数据值！
!!对于连通图，主要过程是在while循环中完成的！



















