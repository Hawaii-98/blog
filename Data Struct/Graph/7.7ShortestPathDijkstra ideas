一、定义图的邻接矩阵存储方式结构体
1.结构体包含一维数组--存储图中的顶点信息
2.包含一个二维数组（邻接矩阵/边表）--存储图中的边的信息
3.包含变量存储图中的顶点数和边数

二、建立两个数组
1.一个用于存储最短路径下标；
2.另一个用于存储到各点最短路径的权值和

三、建立网
1.网即边带有权值的图

四、Dijkstra算法，求无向网G的v0顶点到其余顶点v的最短路径P[v]及带权长度D[v]
0.其中P[v]的值为前驱顶点下标,D[v]表示v0到v的最短路径长度和
1.建立final数组表示v0到某顶点是否已求得最小路径，若已经求过了，则为1
2.建立循环进行数据的初始化：
	全部顶点初始化为未知最短路径状态：final值为零
	将与v0点有连线的顶点加上权值
	初始化路径数组P为-1
3.从v0结点开始，故将v0结点相关的值进行初始化：
	v0至v0路径为0，
	v0至v0不需要求路径 ，视为已经求取最短路径
4.建立主循环，每次求得v0到某个v顶点的最短路径 ：
	初始化当前所知离v0顶点的最近距离为无限大；
	建立循环寻找离v0最近的顶点-具体来说：
		如果该顶点没有被计算过最短路径并且v0到该顶点的距离小于已求得最小路径：
		将最小的距离的顶点下标赋值给临时变量k；
		更新最小路径的值
	将目前找到的最近的顶点的标志值置为1；
	建立循环更新包含目前找到的结点及其相邻未求取最短路径的顶点最短路径及距离
		如果该顶点没有被计算过最短路径并且经过k顶点的路径比现在这条路径的长度短，说明找到了更短的路径，因此更新D[w]和P[w]：
			路径长度要加上已经求取的路径长度最小值；
			当前路径数组的值更新为k

五、打印最短路径及路径长度
1.建立循环，循环初值为路径起点
	建立临时变量j代表路径的顶点位置；
	只要路径数组的值不为-1，输出当前的数组值，并将当前的数组值赋给j得到新的顶点位置；
2.输出起点到各顶点的路径长度
到第i个顶点的路径长度实际上就是路径长度数组的相应值

