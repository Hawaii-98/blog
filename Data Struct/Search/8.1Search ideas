一、无哨兵顺序查找
1.函数形参有数组，待查找元素个数，以及关键字；
2.循环遍历每个元素进行比较，如果匹配就返回当前位置
3.若没有元素匹配，返回零；

二、有哨兵顺序查找
1.将数组的第一个元素设置为关键字--哨兵；
2.建立循环搜最后一个元素开始遍历，只要元素值不为哨兵，位置变量就递减；
3.找到元素或者遍历到哨兵，退出循环，返回此时的位置变量；

三、折半查找
1.定义最低下标为记录首位，定义最高下标为记录末位 
2.只要最低下标小于等于最高下标，就进入循环体：
    进行折半取中间值；
    若查找值比中值小，则最高下标调整到中位下标小一位； 
    若查找值比中值大，则最低下标调整到中位下标大一位；
    如果不是以上两种情况，说明查找值就是中值，返回此中值；
3.若跳出循环体，说明查找失败，返回0；
    
四、插值查找
1.定义最低下标为记录首位，定义最高下标为记录末位 
2.只要最低下标小于等于最高下标，就进入循环体：
    进行折半取中间值---通过插值的方法！mid=low+ (high-low)*(key-a[low])/(a[high]-a[low]); ；
    若查找值比中值小，则最高下标调整到中位下标小一位； 
    若查找值比中值大，则最低下标调整到中位下标大一位；
    如果不是以上两种情况，说明查找值就是中值，返回此中值；
3.若跳出循环体，说明查找失败，返回0；

五、斐波那契查找
1.循环建立斐波那契数列
2.计算n位斐波那契数列的位置；
3.将原数组中不满的数据补全，以便使用斐波那契查找；
4.只要最低下标小于等于最高下标，就进入循环体：
     获取当前分隔的下标；
     如果查找记录小于当前分隔记录：
          最高下标调整到插值下标小一位；
          更改数组的长度（左面为F[k-1]-1）--P255；
     如果查找记录大于当前分隔记录：
          最低下标调整到插值下标大一位 ；
          更改数组的长度（右面为F[k-2]-1）--注意区别；
     若mid<=n则说明mid即为查找到的位置;
     否则：说明找到的值是后来填充的值（位置大于n），则返回最大位置；
5.如果跳出了循环，说明没有找到，返回0；
